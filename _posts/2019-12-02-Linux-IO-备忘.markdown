---
layout: post
title:  "Linux IO 备忘"
categories: Linux
---
# Linux I/O 优化

## 背景

Linux OS是微内核架构，微内核架构收敛核心功能，内核抽象程度度高、稳定，可扩展性强。内核对外部模块开放接口（系统调用），实现模块与内核、模块与模块间的通信。

传统Linux I/O通信，程序通过read()/ write()系统调用与内核交互，读取/发送到相关程序（设备）。下面内容简要描述下read()系统调用涉及的主要活动，及其相应资源占用。

a. CPU从用户态陷入内核态，CPU上下文进行切换，加载内核态下相应数据。

> 接口访问地址属于内核空间，CPU只有在内核态才有权访问。

b. CPU向相应设备/硬盘发出读取请求，由于磁盘I/O相对低效，进程阻塞，等待数据加载完成。

c. 磁盘读取数据到磁盘缓冲区，完成后磁盘向CPU发送中断，请求CPU重新调度数据读取。

d. CPU从磁盘缓冲区拷贝数据到内核缓冲区。

e. CPU从内核缓冲区将同一份数据拷贝至用户程序缓冲区。

f. CPU从内核态切换到用户态，进程继续运行。

从上述主要活动中可以看出，同一份数据从磁盘读取到用户程序的过程中，CPU参与两次上下文切换，两次数据拷贝，而拷贝的数据从始至终都是相同的，对于期待的高性能，高吞吐应用而言，CPU资源相对宝贵，那么对传统I/O方式中的CPU消耗的优化就显得十分必要。

## 实现

### DMA

DMA控制器是CPU与磁盘（设备）间的中间层，目的就是减少数据的CPU拷贝，DMA减少了一次CPU的拷贝。还是以读取为例，DMA简要实现过程如下：CPU向DMA控制器发送读取请求，DMA与磁盘（设备）交互，待到磁盘控制器读取完成后通知DMA，DMA读取磁盘缓冲区数据到内核缓冲区，DMA完成后然后通知CPU进行从内核缓冲区将数据读取到用户缓冲区。这里CPU只负责最后一次数据拷贝，相对传统方式减少了一次。目前大多数设备都支持DMA（Direct Memory Access）技术。

### MMap

MMap内存映射技术，将用户空间进程的虚拟内存地址空间与内核空间下的内存地址进行映射，减少内核缓冲区与用户空间缓冲区之间的一次CPU数据拷贝操作。

### 写时复制

### Sendfile

Sendfile系统调用，数据不会存在于用户空间，也就是说内核空间缓冲区与用户空间缓存区之间的相互CPU数据拷贝会被消除。数据直接在内核空间内从内核缓冲区到相应设备缓冲区之间的拷贝，然后再通过DMA控制器完成数据到具体设备的拷贝工作。可以看到这里仍然会存在一次CPU拷贝工作的消耗。

### Zero-Copy

零拷贝是通过sendfile()系统调用 + DMA gather copy实现的。通过DMA gather copy，消除了sendfile()系统调用中存在的那次CPU数据拷贝工作，直接通过相应fd，data length等数据结构，信息，DMA控制器直接将内核缓冲区的数据拷贝至设备中，减少仅存的那次CPU拷贝工作，至此零拷贝实现。

## 应用

### Java

Java NIO 中有Channel，Buffer两个比较重要的概念。Channel类似于内核空间缓冲区，Buffer类似于用户空间缓冲区。MappedByteBuffer是利用MMap对内核空间与用户空间内存进行了对应映射。

## 启示

系统调用用户态与内核态切换，引发CPU上下文切换，期间需要完成相关上下文相关信息的保存、切换、加载等操作，会消耗相应CPU资源，那么我们需要谨慎操作系统调用，以I/O操作为例，可以对数据进行缓存，然后再通过一次调用，批量集中得将数据传入内核空间以减少上下文切换带来的损耗。

高频读取随机性的数据的时候可以使用MMap来减少相应的数据拷贝的CPU资源损耗，这里强调随机性数据是由于CPU内核缓冲区加载数据的时候会加载额外的连续数据至缓冲区中，由于MMap自身实现也会有性能消耗，当需要读取的数据是连续性的数据时，MMap最终效果如何需要视实际情况而定。