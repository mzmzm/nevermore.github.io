---
layout: post
title: "高可用架构"
categories: Architecture
---


# 高可用架构

## 高可用架构简介

高可用架构是指针对软件系统可靠性这一指标而对系统具体实现方式进行相关针对性设计的架构设计方案。

高可用架构按不同的可靠性保障维度，可分为“计算高可用架构”以及“存储高可用架构”。

无论何种高可用架构方案，“冗余”、“自动故障转移”、“可靠接入”都是其架构设计方案中的核心点。

### 计算高可用架构方案

计算高可用架构方案，通常系统关键服务、组件，会要求进行高可用保障，确保系统能7*24h对外提供服务，不会因为某个计算节点宕机而导致系统服务崩溃。

计算高可用架构设计时，需要把握的关键点：

- 计算无状态。
- 计算幂等性。

### 存储高可用架构方案

存储高可用架构，以MySQL为例，通常会有主从架构，主备架构，双主架构等架构方案。

存储高可用架构设计时，需要把握的关键点：

- 数据一致性。
- 数据持久化。

## 高可用架构设计流程

高可用架构设计过程个人觉得可以分解为以下流程：

- 明确系统结构。

  系统逻辑结构的明确，有利于分解、拆分系统整体可用性到各逻辑层，识别风险，分解可用性问题。同时各逻辑层的明确也是识别系统关键服务路径的前提。

- 识别关键服务。

  依次从系统结构的各逻辑层，明确系统对外提供服务所需保障的核心服务，确保关键服务间流转可用。关键服务路径的确立，可以指导架构设计针对核心服务，采取分离，独立部署，资源供给相对充足；针对非核心服务，当出现影响核心服务时（比如短时大量流量调用核心服务），应设计将其及时降级，保障核心服务可用，同时其资源应该相对受限。

- 合理架构设计。

  系统中没有绝对的高可用，任何服务、功能都存在不可用的可能。我们无法也不需要设计一套百分之百高可用的系统架构，可以统筹考虑业务容忍度、资源利用率、系统复杂度等多个因素，做出适合当时情景的合理架构设计。

## 高可用架构设计常用技术组件

以互联网系统为例，通常依次划分为：接入层，代理层，应用层，服务层，数据层。

### 接入层

接入层的可用性威胁可能包括安全性威胁，流量攻击，DNS缓存等。解决的方案可以有HTTPS协议，网关流量控制，HTTP DNS等方式。

### 代理层

代理层，通常我们使用Nginx作为反向代理，那作为代理层的可用性威胁有Nginx单点故障。可以部署N+1台Nginx服务器，通过keepalived组件，来检测Nginx的存活状态，确保可用性。

> Keepalived是基于VRRP协议实现的，即Virtual Router Redundancy Protocol，虚拟路由冗余协议。

### 应用层

代理层以Nginx为例，可以检测到应用层各冗余节点的状态，当某个节点故障下线时，代理层将会把流量导向正常运行节点。

### 服务层

服务层的高可用可以通过：a. SpringCloud体系下通过Eureka健康检查，会自动检测服务层工作节点的状态，下线故障节点；b. 利用创建K8s的Deployment资源，由K8s来负责对故障节点及时进行自我修复。

### 数据层

数据层的高可用可以通过: a. 读写分离，减轻数据库压力；b. keepalived检测主从（主备）架构主机状态，及时完成主机宕机下线时，从（备）机到主机的切换过程。